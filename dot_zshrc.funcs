#!/bin/env zsh

#colored messages

z_coloroff() { echo -en "$reset_color" }
z_colormsg() { [ -n "$1" ] && echo -en "${fg_bold[white]}${@}${reset_color}" }

z_error() { echo -e "${fg_bold[red]}[ e ]${reset_color} $@" }
z_info() { echo -e "${fg_bold[yellow]}[ i ]${reset_color} $@" }
z_success() { echo -e "${fg_bold[green]}[ k ]${reset_color} $@" }
z_mesg() { echo -e "${fg_bold[cyan]}[ m ]${reset_color} $@" }

# develop helpers
alias z_indent='indent -nsaf -npcs -cli2 -i2 -lp -nprs -nsaw -nut -cbi2 -bli0 -bls -nbad -npsl'
alias z_diff='diff -abBpur'

z_diffstat() {
    awk 'BEGIN { inserts=0; removals=0; } \
         /^\+/ { inserts++; } \
         /^-/ { removals++; } \
         END { print "inserts ", inserts, " removals ", removals ; }'
}

alias z_dubigf='find . -size +10M -exec ls -1 "{}" ";"'
alias z_du='du -s * | sort -n'

# check hosts that are online
z_whoisonline() {

    if ! which nmap 2>&1 > /dev/null; then
        echo "nmap is not installed."
        return 1
    else
        if [ -n "$1" ]; then
            net="$1"
        else
            echo "missing net."
            return 1
        fi
        z_info "testing $net for online boxes"
        sudo nmap --system-dns -sP $net | awk '/Host/ && /up/ { print $0; }'
        z_success "done"
    fi
}


z_fakepass()
{
  local l=8
  [ -n "$1" ] && l=$1
  dd if=/dev/urandom count=1 2> /dev/null | openssl enc -base64 | head -n 2 | tail -n 1 | cut -c -$l
}

alias z_fakename='nc koeln.ccc.de 23 | cut -d \  -f 4,5'

z_tarcp() {

    if (( $# >= 2 )); then

        echo "copy ${@[1, -2]} => ${@[-1]}"

        # http://www.ivarch.com/programs/pv.shtml
        if which pv &> /dev/null ; then
            tar -c -f - ${@[1, -2]} | pv -t -b -r | tar -x -f - -C ${@[-1]}
        else
            tar -c -v -f - ${@[1, -2]} | tar -x -f - -C ${@[-1]}
        fi
    else
        "error, not enough parameters."
        return 1
    fi
}

z_ddiff() {

    if [[ $# -lt 2 ]]; then
        echo "usage: $0 dir1 dir2"
        return 1
    fi

    tmp1="${TMP}/${0}_${$}_1"
    tmp2="${TMP}/${0}_${$}_2"

    chpwd() { }

    ( cd "$1"; print -l **/* > "${tmp1}" )
    ( cd "$2"; print -l **/* > "${tmp2}" )

    diff -u "$tmp1" "$tmp2" | sed '1,3d' | sed '/^[^-+]/d'

    rm -f "$tmp1" "$tmp2"
}


# unpacks a archive
z_unarc() {
    case $1 in
        *.tar|*.tar.gz|*.tgz|*.tar.bz2|*.tbz)
           case $SH_OS in
                freebsd) tar xvf $1;;
                *) tar xavf $1;;
           esac
           ;;
        *.zip|*.pk3|*.jar)
            unzip $1 ;;
        *.tar.lzma|*.tar.lz)
            lzcat $1 | tar xvf - ;;
        *.rar)
            unrar x $1;;
        *.7z|*.xz)
            7z x $1;;
        *.ace)
            unace x $1;;
        *.rz)
            rzip -d $1;;
        *.tar.rz)
            rzip -d $1; tar xvf ${1%.rz};;
    esac
}

# list content of an archive
z_liarc() {
    case $1 in
        *.tar|*.tar.gz|*.tgz|*.tar.bz2|*.tbz)
            case $SH_OS in
                freebsd) tar tvf $1;;
                *) tar tavf $1;;
            esac
            ;;
        *.tar.lzma|*.tar.lz)
            lzcat $1 | tar tvf - ;;
        *.zip|*.pk3|*.jar)
            unzip -l $1;;
        *.rar)
            unrar l $1;;
        *.7z|*.xz)
            7z l $1;;
        *.ace)
            unace l $1;;
        *.rpm)
            rpm -l $1;;
        *.o)
            nm $1;;
        *.a)
            ar t $1;;
    esac
}

# encryption with openssl
z_aesd() {
    CMD="openssl enc -d -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}

z_aese() {
    CMD="openssl enc -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}

# open the associated program
z_open() {

    case "$SH_OS" in
       WIN32|cygwin*)
            cygstart "$*"
            ;;
       darwin) # TODO: check on macos
            open "$*"
            ;;
       *)
            xdg-open "$*"
            ;;
    esac
}

alias zo=z_open


# print human readable numbers
z_humanp() {
    l=""
    u=""
    if (( $1 < 1000 )); then
        print $1
        return
    elif (( $1 > 1000000000000 )); then
        (( l = $1 / 1000 ))
        (( l = ($l + 50000000) / 100000000 ))
        u=T
    elif (( $1 > 1000000000 )); then
        (( l = $1 + 50000000 / 100000000 ))
        u=G
    elif (( $1 > 1000000 )); then
        (( l = ($1 + 50000) / 100000 ))
        u=M
    else
        (( l = ($1 + 50) / 100 ))
        u=k
    fi

    (( b = $l / 10 ))
    (( d = $l % 10 ))

    print $b.$d$u
}


z_init_pyenv() {
    python -c "import urllib, os; os.mkdir('py-env'); urllib.urlretrieve('http://goo.gl/sJhEO', 'py-env/virtualenv.py')"
}

z_showcert() {
    openssl x509 -text -noout -in $1
}


if [ ${ZSH_VERSION//\./} -ge 420 ]; then
    alias -s zip='unzip -l'
    alias -s pk3='unzip -l'
    alias -s rar='unrar l'
    alias -s tar='tar tf'
    alias -s tar.gz='tar tf'
    alias -s ace='unace l'
    alias -s rpm='rpm -l'
    alias -s o='nm'
    alias -s a='ar t'
    alias -s 7z='7z l'
    alias -s bz2='bzip2 -c -d'
    alias -s gz='gzip -c -d'
fi

################################################################################
# k8s section
################################################################################
alias kc='kubectl'

k8s-activate() {
	local c="${1:-`pwd`/admin.conf}"
	if [ ! -f "$c" ]; then
		echo "$c does not exist"
		return 1
	fi
    c=$(python -c "import os,sys;print(os.path.realpath('$c'))")
	export KUBECONFIG="$c"
	source <(kubectl completion zsh)
	source <(helm completion zsh)
}

k8s-pod-node-name() { kubectl get pod "$@" -ojson | jq -j '.spec.nodeName' }
k8s-pod-containers() {
	kubectl get pod "$@" -ojson | \
		jq -r '.status.containerStatuses[] | .name + " @ " + .image'
}

k8s-pod-ls() { 
	kubectl get pods "-o=custom-columns=Name:.metadata.name,Node:.spec.nodeName,Memory:.spec.containers[].resources.limits.memory,IP:.status.podIP,Status:.status.phase,Image:.spec.containers[].image" "$@" 
}



################################################################################
# docker section
################################################################################

# https://djs55.github.io/jekyll/update/2017/11/27/docker-for-mac-disk-space.html
# /Users/mg/Library/Containers/com.docker.docker/Data/vms/0
docker-prune() {
    docker run --rm -it --privileged --pid=host walkerlee/nsenter -t 1 -m -u -i -n fstrim /var/lib/docker
}
docker-vm() {
    screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty
}

