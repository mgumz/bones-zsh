#!/bin/env zsh

#colored messages

sh_coloroff() { echo -en "$reset_color" }
sh_colormsg() { [ -n "$1" ] && echo -en "${fg_bold[white]}${@}${reset_color}" }

sh_error() { echo -e "${fg_bold[red]}[ e ]${reset_color} $@" }
sh_info() { echo -e "${fg_bold[yellow]}[ i ]${reset_color} $@" }
sh_success() { echo -e "${fg_bold[green]}[ k ]${reset_color} $@" }
sh_mesg() { echo -e "${fg_bold[cyan]}[ m ]${reset_color} $@" }

# develop helpers
alias z_indent='indent -nsaf -npcs -cli2 -i2 -lp -nprs -nsaw -nut -cbi2 -bli0 -bls -nbad -npsl'
alias z_diff='diff -abBpur'

alias sh_svnstat="svn status | awk '/^[^?]/'"
# use with   svn diff -r `sh_svnprev`
sh_svnprev() { echo $(( `svnversion . | sed 's/[^0-9].*//'` - 1)) }


#
# change to a profile written down in $HOME/.myprofiles
#
#   #begin[NAME]
#     FOO=BAR
#     JOHN=DOE
#   #end[NAME]
#
# $1 - name of the profile (a must)
# $2 - name of the profilefile (optional)
sh_myprofile()
{
  f=$HOME/.myprofiles
  [ -n "$1" ] || return 1
  [ -n "$2" ] && f="$2"
  sh_info "setting profiles to \"$1\" ... "
  
  sed -n '/^#begin\['$1'\]/,/^#end\['$1'\]/p' "$f" |
  while read l
  do
    eval $l
  done
  sh_success "done"
}

alias z_dubigf='find . -size +10M -exec ls -1 "{}" ";"'
alias z_du='du -s * | sort -n'

# check hosts that are online
z_whoisonline() {

    if ! which nmap 2>&1 > /dev/null; then
        echo "nmap is not installed."
        return 1
    else
        if [ -n "$1" ]; then
            net="$1"
        else
            echo "missing net."
            return 1
        fi
        sh_info "testing $net for online boxes"
        sudo nmap --system-dns -sP $net | awk '/Host/ && /up/ { print $0; }' 
        sh_success "done"
    fi
}


z_fakepass()
{
  local l=8
  [ -n "$1" ] && l=$1
  dd if=/dev/urandom count=1 2> /dev/null | uuencode -m - | head -n 2 | tail -n 1 | cut -c -$l
}

alias z_fakename='nc koeln.ccc.de 23 | cut -d \  -f 4,5'

z_tarcp() {

    if (( $# >= 2 )); then

        echo "copy ${@[1, -2]} => ${@[-1]}"

        # http://www.ivarch.com/programs/pv.shtml
        if which pv ; then
            tar -c -f - ${@[1, -2]} | pv -t -b -r | tar -x -f - -C ${@[-1]} 
        else
            tar -c -v -f - ${@[1, -2]} | tar -x -f - -C ${@[-1]}
        fi
    else
        "error, not enough parameters."
        return 1
    fi
}

z_ddiff() {

    if [[ $# -lt 2 ]]; then
        echo "usage: $0 dir1 dir2"
        return 1
    fi

    tmp1="${TMP}/${0}_${$}_1"
    tmp2="${TMP}/${0}_${$}_2"

    chpwd() { }

    ( cd "$1"; print -l **/* > "${tmp1}" )
    ( cd "$2"; print -l **/* > "${tmp2}" )

    diff -u "$tmp1" "$tmp2" | sed '1,3d' | sed '/^[^-+]/d'

    rm -f "$tmp1" "$tmp2"
}



# unpacks a archive
z_unarc() {
    local archive=$1
    case $archive in
        *.tar) 
            tar xvf $1;;
        *.tar.gz|*.tgz) 
            gzip -d -c $archive | tar xvf - ;;
        *.tar.bz2|*.tbz | *.tb2 )
            bzip2 -d -c $archive | tar xvf - ;;
        *.zip|*.pk3)
            unzip $archive ;;
        *.rar)
            unrar x $archive;;
        *.7z)
            7z x $archive;;
        *.ace)
            unace x $archive;;
        *.rz)
            rzip -d $archive;;
        *.tar.rz)
            rzip -d $archive; tar xvf ${archive%.rz};;
    esac   
}

# list content of an archive
z_liarc() {
    local archive=$1
    case $archive in
        *.tar) 
            tar tvf $1;;
        *.tar.gz|*.tgz) 
            gzip -d -c $archive | tar tvf - ;;
        *.tar.bz2|*.tbz|*.tbz2|*.tb2)
            bzip2 -d -c $archive | tar tvf - ;;
        *.zip|*.pk3)
            unzip -l $archive ;;
        *.rar)
            unrar l $archive;;
        *.7z)
            7z l $archive;;
        *.ace)
            unace l $archive;;
        *.rpm)
            rpm -l $archive;;
        *.o)
            nm $archive;;
        *.a)
            ar t $archive;;
    esac
}

# encryption with openssl
z_aesd() {
    CMD="openssl enc -d -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}

z_aese() {
    CMD="openssl enc -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}


if [ ${ZSH_VERSION//\./} -ge 420 ]; then
    alias -s zip='unzip -l'
    alias -s pk3='unzip -l'
    alias -s rar='unrar l'
    alias -s tar='tar tf'
    alias -s tar.gz='echo '
    alias -s ace='unace l'
    alias -s rpm='rpm -l'
    alias -s o='nm'
    alias -s a='ar t'
    alias -s 7z='7z l'
    alias -s bz2='bzip2 -c -d'
    alias -s gz='gzip -c -d'
fi

# os stuff
case "$SH_OS" in
    freebsd)
        pkg_chkupgrade() {
            sudo portupgrade -ran 2> /dev/null | awk '/^[[:space:]]+[\+].*/ { print $0 }' | sort -r
        }

        geli_on() {
            if [ $# -lt 1 ]; then
                echo "$0 encfile"
                return 1
            fi

            sudo -p "sudo pass" mdconfig -a -t vnode -f $1 -u 0
            sudo -p "sudo pass" geli attach -k $1.key /dev/md0

        }

        geli_off() {
            if [ $# -lt 1 ]; then
                echo "$0 encfile"
                return 1
            fi

            sudo -p "sudo pass" geli detach /dev/md0
            sudo -p "sudo pass" mdconfig -d -u 0
        }

        port_search() {
            make -C /usr/ports search name=$*
        }
        ;;
esac
