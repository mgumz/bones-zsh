#!/bin/env zsh

#--------------------------------------------------------#--
# shortcuts
#--------------------------------------------------------#--

alias j='jobs'
alias dn='disown'
alias p='ps -f'
alias cd..='cd ..'
alias ..='cd ..'

--() { popd }
++() { pushd "$@" }
compdef _cd ++

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

,xmv() {
    xargs -J % mv % "$@"
}


,scp-resume() {
    rsync --checksum --partial --progress --rsh=ssh "$@"
}

,diff() { 
    diff -abBpur "$@"
}

,diff-stat() {
    awk 'BEGIN  { inserts=0; removals=0; } \
         /^\+/  { inserts++; } \
         /^-/   { removals++; } \
         END    { print "inserts ", inserts, " removals ", removals ; }'
}

# check hosts that are online
,who-is-online() {

    if ! whence -p nmap > /dev/null; then
        echo "nmap is not installed."
        return 1
    fi

    if [ ! -n "$1" ]; then
        echo "missing net."
        return 1
    fi

    z_info "testing $1 for online boxes"
    sudo nmap -oG - --system-dns -sP $1 | awk '/Host/ && /Up/ { print $0; }'
    z_success "done"
}

,ls-zombies() {
    ps "$@" -xo pid,ppid,stat,command |awk '$3 == "Z"'
}

,ps() {
    ps -xo pid,ppid,pcpu,cpuid,time,stat,comm,args "$@" 
}

#--------------------------------------------------------#--
# crypto section
#--------------------------------------------------------#--

,fakepass() {
  local l=8
  [ -n "$1" ] && l=$1
  dd if=/dev/urandom count=1 2> /dev/null | \
      openssl enc -base64 -A | \
      awk 'NR == 1 { printf("%.'$l's\n", $1) }'
}

# alias z_fakename='nc koeln.ccc.de 23 | cut -d \  -f 4,5'

,aes-d() {
    openssl enc -d -a -aes-256-ecb -salt "$@"
}

,aes-e() {
    openssl enc -a -aes-256-ecb -salt "$@"
}

,show-cert() {
    openssl x509 -text -noout -in $1
}

#--------------------------------------------------------#--
# k8s section
#--------------------------------------------------------#--

,k8s-activate() {
	local c="${1:-`pwd`/admin.conf}"
	if [ ! -f "$c" ]; then
		echo "$c does not exist"
		return 1
	fi
    c=$(python -c "import os,sys;print(os.path.realpath('$c'))")
	export KUBECONFIG="$c"
	source <(kubectl completion zsh)
	source <(helm completion zsh)
}

,k8s-pod-node-name() {
    kubectl get pod "$@" -ojson | jq -j '.spec.nodeName'
}

,k8s-pod-containers() {
	kubectl get pod "$@" -ojson | \
		jq -r '.status.containerStatuses[] | .name + " @ " + .image'
}

,k8s-pod-ls() { 
	kubectl get pods "-o=custom-columns=Name:.metadata.name,UID:.metadata.uid,Node:.spec.nodeName,Memory:.spec.containers[].resources.limits.memory,IP:.status.podIP,Status:.status.phase,Image:.spec.containers[].image" "$@" 
}

,k8s-pod-limits() {
	kubectl get pods -ojson "$@" |jq -r '.items[]|[.metadata.name, (.spec.containers[]|[.name,":",.resources.requests.cpu,"/",.resources.limits.cpu,";",.resources.requests.memory,.resources.limits.memory]|join(",") ) ]|@tsv'
}

#--------------------------------------------------------#--
# docker section
#--------------------------------------------------------#--

# https://djs55.github.io/jekyll/update/2017/11/27/docker-for-mac-disk-space.html
# /Users/mg/Library/Containers/com.docker.docker/Data/vms/0
,docker-prune() {
    docker run --rm -it --privileged --pid=host walkerlee/nsenter -t 1 -m -u -i -n fstrim /var/lib/docker
}

,docker-vm() {
    screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty
}

,docker-host() {
    docker run --rm -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh
}

#--------------------------------------------------------#--
# osx:brew section
#--------------------------------------------------------#--

,brew-greedy-numbers() {
    brew outdated --greedy --json=v2 | \
        jq -r '.formulae + .casks 
            | .[] 
            | select(.current_version != "latest") 
            | .name + ":" + .current_version'
}

,brew-upgrade-greedy-numbers() {

    local jq_filter='.[] | select(.current_version != "latest") | .name'
    local filter() { cat }
    local args="$@"

    [[ "$1"x == "x" ]] || local filter() { eval "$args" }

    for i in formulae casks; do
        brew outdated --greedy --json=v2 --$i | \
            jq -r ".$i|$jq_filter" |\
            filter | \
            tee | \
            xargs -t brew upgrade --$i
    done
}

,brew-cleanup-all() {
    brew cleanup --prune=all -s
}

,brew-list-installed() {
    brew info --installed --json=v2 | \
        jq -r '. | ( ( .formulae[]|.name+" "+([.installed[0].runtime_dependencies[]|.full_name]|sort|join(",") ) ), .casks[].token )'
}

#--------------------------------------------------------#--
# cli graphics section
#--------------------------------------------------------#--

,icat() {
    if [[ "$KITTY_PID"x != "x" ]]; then
        kitty +kitten icat --align=left "$@"
    else
        wezterm imgcat "$@"
    fi
}
,pdfcat() { magick convert -density 300 "$@" jpg:- | ,icat }
,svgcat() { rsvg-convert | ,icat "$@" }
,dotcat() { dot -Tsvg \
            -Gbgcolor=black \
            -Nbgcolor=black \
            -Ebgcolor=black \
            -Gcolor=white \
            -Ncolor=white \
            -Ecolor=white \
            -Gfontcolor=white \
            -Efontcolor=white \
            -Nfontcolor=white | ,svgcat }

,pumlcat() { plantuml -Tsvg -p | ,svgcat }
,neatocat() { neato -Tsvg \
            -Gbgcolor=black \
            -Nbgcolor=black \
            -Ebgcolor=black \
            -Gcolor=white \
            -Ncolor=white \
            -Ecolor=white \
            -Gfontcolor=white \
            -Efontcolor=white \
            -Nfontcolor=white | ,svgcat }

#--------------------------------------------------------#--
# 1password
#--------------------------------------------------------#--

,support_1password() {
    ,op-fzf() {
        op item list --no-color --long --iso-timestamps| \
            sed 1d| \
            fzf| \
            awk '{ print $1 }'
    }

    ,op-fzfp() {
        op item list --no-color --long --iso-timestamps| \
            sed 1d| \
            fzf --preview 'op item get {1}'| \
            awk '{ print $1 }'
    }

    eval "$(op completion zsh)"; compdef _op op
}

#--------------------------------------------------------#--
# everything else
#--------------------------------------------------------#--

,jwt-decode() {
    jq -R 'split(".") | .[1] | @base64d | fromjson'
}

,epochz() { 
    epoch -quiet -tz utc "$@"
}

,backup() {
    local target=$1
    shift
    zsh ~/.config/restic/job-$target/job.sh "$@"
}

_backup_completion() {
    compadd -- ${(f)"$(ls -d ~/.config/restic/job-* 2>/dev/null | xargs -n 1 basename | sed 's/^job-//')"}
}
compdef _backup_completion ,backup

,ez() {
    eza --time-style=long-iso --git "$@" 
}

,cal() {
    ncal -A 2 -B 1
}

,mkdn() {
    local d=$(date +"%Y-%m-%d--$@")
    mkdir "$d" && echo "$d"
}

,qrtool() {
    qrtool enc "$@" | ,icat
}


# vim:ft=zsh
