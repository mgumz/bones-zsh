#!/bin/env zsh

#--------------------------------------------------------#--
# shortcuts
#--------------------------------------------------------#--

alias j='jobs'
alias dn='disown'
alias p='ps -f'
alias cd..='cd ..'
alias ..='cd ..'

function ++() { pushd "$@" }
compdef _cd ++
function --() { popd }

xmv() {
    xargs -J % mv % "$@"
}

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

function z_scpresume() {
    rsync --checksum --partial --progress --rsh=ssh "$@"
}

alias z_diff='diff -abBpur'

z_diffstat() {
    awk 'BEGIN { inserts=0; removals=0; } \
         /^\+/ { inserts++; } \
         /^-/ { removals++; } \
         END { print "inserts ", inserts, " removals ", removals ; }'
}

# check hosts that are online
z_whoisonline() {

    if ! which nmap 2>&1 > /dev/null; then
        echo "nmap is not installed."
        return 1
    fi

    if [ ! -n "$1" ]; then
        echo "missing net."
        return 1
    fi

    z_info "testing $1 for online boxes"
    sudo nmap --system-dns -sP $1 | awk '/Host/ && /up/ { print $0; }'
    z_success "done"
}

#--------------------------------------------------------#--
# crypto section
#--------------------------------------------------------#--

z_fakepass() {
  local l=8
  [ -n "$1" ] && l=$1
  dd if=/dev/urandom count=1 2> /dev/null | openssl enc -base64 | head -n 2 | tail -n 1 | cut -c -$l
}

# alias z_fakename='nc koeln.ccc.de 23 | cut -d \  -f 4,5'

z_aesd() {
    CMD="openssl enc -d -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}

z_aese() {
    CMD="openssl enc -a -aes-256-ecb -salt"
    [ $# -eq 0 ] || CMD="$CMD -in $1"
    eval $CMD
}

z_showcert() {
    openssl x509 -text -noout -in $1
}

#--------------------------------------------------------#--
# k8s section
#--------------------------------------------------------#--

k8s-activate() {
	local c="${1:-`pwd`/admin.conf}"
	if [ ! -f "$c" ]; then
		echo "$c does not exist"
		return 1
	fi
    c=$(python -c "import os,sys;print(os.path.realpath('$c'))")
	export KUBECONFIG="$c"
	source <(kubectl completion zsh)
	source <(helm completion zsh)
}

k8s-pod-node-name() {
    kubectl get pod "$@" -ojson | jq -j '.spec.nodeName'
}

k8s-pod-containers() {
	kubectl get pod "$@" -ojson | \
		jq -r '.status.containerStatuses[] | .name + " @ " + .image'
}

k8s-pod-ls() { 
	kubectl get pods "-o=custom-columns=Name:.metadata.name,Node:.spec.nodeName,Memory:.spec.containers[].resources.limits.memory,IP:.status.podIP,Status:.status.phase,Image:.spec.containers[].image" "$@" 
}


#--------------------------------------------------------#--
# docker section
#--------------------------------------------------------#--

# https://djs55.github.io/jekyll/update/2017/11/27/docker-for-mac-disk-space.html
# /Users/mg/Library/Containers/com.docker.docker/Data/vms/0
docker-prune() {
    docker run --rm -it --privileged --pid=host walkerlee/nsenter -t 1 -m -u -i -n fstrim /var/lib/docker
}
docker-vm() {
    screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty
}

docker-host() {
    docker run --rm -it --privileged --pid=host debian nsenter -t 1 -m -u -n -i sh
}

#--------------------------------------------------------#--
# osx:brew section
#--------------------------------------------------------#--

_brew-cask-greedy-numbers() {
    brew outdated --cask --greedy --verbose | awk '/[0-9]$/ { print $0 }'
}
_brew-cask-upgrade-greedy-numbers() {
    brew-cask-greedy-numbers | awk '{print $1}' | xargs brew upgrade --cask --greedy "$@"
}

brew-greedy-numbers() {
    brew outdated --greedy --json=v2 | \
        jq -r '.formulae + .casks | .[] | select(.current_version != "latest") | .name + ":" + .current_version'
}

brew-upgrade-greedy-numbers() {
    brew outdated --greedy --json=v2 --formula | \
        jq -r '.formulae | .[] | select(.current_version != "latest") | .name' | \
        tee | \
        xargs brew upgrade --formula
    brew outdated --greedy --json=v2 --cask | \
        jq -r '.casks | .[] | select(.current_version != "latest") | .name' | \
        tee | \
        xargs brew upgrade --casks
}


#--------------------------------------------------------#--
# cli graphics section
#--------------------------------------------------------#--

icat() { kitty +kitten icat --align=left "$@" }
isvg() { rsvg-convert | icat "$@" }
idot() { dot -Tsvg \
            -Gbgcolor=black \
            -Nbgcolor=black \
            -Ebgcolor=black \
            -Gcolor=white \
            -Ncolor=white \
            -Ecolor=white \
            -Gfontcolor=white \
            -Efontcolor=white \
            -Nfontcolor=white |isvg }

ipuml() { plantuml -Tsvg -p |isvg }

ineato() { neato -Tsvg \
            -Gbgcolor=black \
            -Nbgcolor=black \
            -Ebgcolor=black \
            -Gcolor=white \
            -Ncolor=white \
            -Ecolor=white \
            -Gfontcolor=white \
            -Efontcolor=white \
            -Nfontcolor=white |isvg }


#--------------------------------------------------------#--
# 1password
#--------------------------------------------------------#--

fzop() {
    op item list --long --iso-timestamps|sed 1d|fzf
}

eval "$(op completion zsh)"; compdef _op op

#--------------------------------------------------------#--
# everything else
#--------------------------------------------------------#--

jwt-decode() {
    jq -R 'split(".") | .[1] | @base64d | fromjson'
}

epochz() { 
    epoch -quiet -tz utc "$@"
}

alias exa="exa --time-style=long-iso --git"

# vim:ft=zsh
