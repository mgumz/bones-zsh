#------------------------------------------------------------------#--
#------------------------------------------------------------------#--

: ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}}

local _ssh_known_hosts=()
if [ -f ~/.ssh/known_hosts ]; then
  _ssh_known_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:# *}%%\ *}%%,*})
fi

local _ssh_config=()
if [ -f ~/.ssh/config ]; then
  _ssh_config=(${(s: :)${${(M)${(f)"$(cat $HOME/.ssh/config*)"}:#Host *}/Host\ /}})
fi

hosts=(
    "$_etc_hosts[@]"
    "$_ssh_known_hosts[@]"
    "$_ssh_config[@]"
    localhost
)

typeset -U hosts

#--------------------------------------------------------#--
# options
#--------------------------------------------------------#--
setopt \
    always_to_end \
    append_history \
    auto_name_dirs \
    autocd \
    automenu \
    bang_hist \
    beep \
 no_bgnice \
    c_bases \
    correct \
    complete_in_word \
    extended_glob \
    extended_history \
    glob \
    glob_complete \
    glob_dots \
    hist_find_no_dups \
    hist_no_store \
    hist_save_no_dups \
    hist_ignore_space \
    hist_ignore_all_dups \
    hist_no_functions \
    hist_reduce_blanks \
    inc_append_history \
    interactive_comments \
 no_hup \
    ksh_glob \
    list_packed \
    long_list_jobs \
    mark_dirs \
    notify \
    prompt_cr \
    pushd_ignore_dups \
    share_history \
    transient_rprompt

unsetopt \
    menu_complete

HISTFILE=$HOME/.zhistory
HISTSIZE=1000
SAVEHIST=1000
WATCH=all
WATCHFMT='%n %a %l from %m at %t.'
LOGCHECK=10

# umask is for permissions-of-new-files
# i cant handle octals :) but its the same as 077
umask u=rwx,g=,o=

# platform stuff
case "$SH_OS" in
    WIN32|cygwin*)
        ;;
    *)
        # i am a developer, so i need cores :)
        #limit coredumpsize 10M
        ;;
esac


#--------------------------------------------------------#--
# load zsh-kungfoo
#--------------------------------------------------------#--
autoload colors && colors
autoload select-word-style zmv zcalc
autoload zsh/parameter

# if you now paste a url it will be magically quoted!
# but it only works on 4.2.0 and later.
if [ ${ZSH_VERSION//\./} -ge 420 ]; then
  autoload -U url-quote-magic
  zle -N self-insert url-quote-magic
fi

#--------------------------------------------------------#--
# completion
#--------------------------------------------------------#--
fpath=($HOME/.zshcompletions $fpath)
autoload -U compinit && compinit -u
compdef _man w3mman
compdef _ssh ssh2

zstyle ':completion:*::::' completer _expand _complete _ignored #_approximate
zstyle ':completion:*:expand:*' tag-order all-expansions

zstyle '*' hosts $hosts

zstyle ':completion:*:processes' command 'ps x -o pid,nice,pcpu,tt,args'
zstyle ':completion:*' list-colors $LS_COLORS

#--------------------------------------------------------#--
# prompt
#--------------------------------------------------------#--

coff=$reset_color
cbg="${coff}${bg[black]}"
croot=$fg_bold[red]
cname=$fg_bold[green]
cjobs=$fg_bold[yellow]
cerror=$fg_bold[magenta]
chost=$fg_bold[cyan]
ctime=$fg_bold[cyan]

export PROMPT="%{%(!.$croot.$coff)%}%%%{$coff%} "

function display_info() {

    local _info="${cbg}"

    _info+="%(!.${croot}.${cname})%n${cbg}@${chost}%m${cbg}" # user@machine
    _info+="%(1j. | ${cjobs}%j${cbg}.)"                      # number jobs

    #
    if [ $# -ne 0 -a "$1" != "0" ]; then
        _info+=" | ${cerror}${1}${cbg}"
    fi

    _info+=" | %/"                                      # pwd
    _info+=" | %D{%Y-%m-%d} %*"                         # date-time

    _GIT_INFO=$(git describe --all --long 2> /dev/null )
    if [ -n "$_GIT_INFO" ]; then
        _GIT_HEAD=$(git symbolic-ref --short HEAD 2> /dev/null)
        if [ -n "$_GIT_HEAD" ]; then
            _info+=" | ${croot}%{$_GIT_HEAD%}${cbg} - %{$_GIT_INFO%}"
        fi
    fi

    if [ -n "$KUBECONFIG" -a $(which yq) ]; then
        local _K8S_CTX=$(yq r - current-context < $KUBECONFIG)
        _info+=" | âŽˆ $_K8S_CTX"
    fi

    print -P "$_info%E"
}

function display_info_x() {
    local CMD=$1
    if [ "$1"x != "x" ]; then CMD="${CMD} | "; fi
    case "$TERM" in
        *xterm*|*rxvt*) echo -en "\e]2;${CMD}$PPID <$USERNAME@$HOST>: ${PWD}\a";;
        screen) [ -n $DISPLAY ] && echo -en "\e]2;${CMD}$PPID <$USERNAME@$HOST>: ${PWD}\a"
        ;;
    esac
}


display_info_full() {
    display_info $@
    display_info_x
}

chpwd() {
    display_info_full $?
    [[ -t 1 ]] || return
}

precmd() {
    local E=$?
    [ $E -eq 0 ] || display_info $E
}

preexec() {
    local CMD=$1
    case "$TERM" in
    *xterm*|screen*)
        case "$CMD" in
            *\033]0*) ;;
            *) display_info_x $CMD ;;
        esac
        ;;
    *)
        ;;
    esac
}


di() { display_info_full $? }

display_info_x

#--------------------------------------------------------#--
# keymapping
#--------------------------------------------------------#--
# press ctrl-v to get special keys (like 'home')
zle -N select-word-style
select-word-style bash
bindkey -e
#bindkey '\e^h' delete-backward-word  # alt - backspace
bindkey ' ' magic-space              # history completion with space too
bindkey '[D' emacs-backward-word     # alt-cursor-left
bindkey '[C' emacs-forward-word      # alt-cursor-right
bindkey '' vi-match-bracket        # ctrl 5
bindkey '^[[8~' end-of-line          # home
bindkey '^[[7~' beginning-of-line    # end
bindkey '^k' kill-line
bindkey "^?" backward-delete-char
#  c-_ is undo

#----------------------------------------------------
# keychain => http://www.gentoo.org/projects/keychain
#----------------------------------------------------
if [ x"$USERNAME" != x"root" -a ! -n "${NO_KEYCHAIN+x}" ]
then
    keys=""
    [ ! -f ~/.ssh/id_dsa ] || keys="~/.ssh/id_dsa "
    [ ! -f ~/.ssh/id_rsa ] || keys="$keys ~/.ssh/id_rsa"
    if [ -n "$keys" ]; then
        if which keychain &> /dev/null
        then
            eval "keychain -q $keys"
            . ~/.keychain/${HOST}-sh
        fi
    fi
    unset keys
fi



#-----------------
# host-specifics
#-----------------
for rc in ~/.zshrc.aliases ~/.zshrc.funcs ~/.zshrc.local ; do
  [ ! -f $rc ] || source $rc
done

# vim:nowrap:ft=zsh

