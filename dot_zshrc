#------------------------------------------------------------------#--
# my zsh-config ... coz zsh rox hell
#------------------------------------------------------------------#--

: ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}}

_ssh_known_hosts=()
if [ -f ~/.ssh/known_hosts ]; then
  _ssh_known_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:# *}%%\ *}%%,*})
fi


_ssh_config=""
if [ -f ~/.ssh/config ]; then
  _ssh_config=(${${(M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}/Host\ /})
fi

hosts=(
    "$_etc_hosts[@]"
    "$_ssh_known_hosts[@]"
    "$_ssh_config[@]"
    localhost
)

typeset -U hosts

#--------------------------------------------------------#--
# options
#--------------------------------------------------------#--
setopt \
    append_history \
    autocd \
    bang_hist \
    beep \
 no_bgnice \
    c_bases \
    correct \
    extended_glob \
    extended_history \
    glob \
    glob_complete \
    glob_dots \
    hist_no_store \
    hist_save_no_dups \
    hist_ignore_space \
    hist_no_functions \
    hist_reduce_blanks \
 no_hup \
    ksh_glob \
    list_packed \
    long_list_jobs \
    mark_dirs \
    notify \
    promptcr \
    share_history

HISTFILE=$HOME/.zhistory
HISTSIZE=1000
SAVEHIST=1000
WATCH=all
WATCHFMT='%n %a %l from %m at %t.'
LOGCHECK=10

# umask is for permissions-of-new-files
# i cant handle octals :) but its the same as 077
umask u=rwx,g=,o=

# platform stuff
case "$SH_OS" in
    WIN32|cygwin*)
        ;;
    *)
        # i am a developer, so i need cores :)
        limit coredumpsize 10M
        ;;
esac


#--------------------------------------------------------#--
# load zsh-kungfoo
#--------------------------------------------------------#--
autoload colors && colors
autoload select-word-style zmv zcalc
autoload zsh/parameter

# if you now paste a url it will be magically quoted!
# but it only works on 4.2.0 and later.
if [ ${ZSH_VERSION//\./} -ge 420 ]; then
  autoload -U url-quote-magic
  zle -N self-insert url-quote-magic
fi

#--------------------------------------------------------#--
# completion
#--------------------------------------------------------#--
autoload -U compinit && compinit -u
compdef _man w3mman
compdef _ssh ssh2

zstyle ':completion:*::::' completer _expand _complete _ignored #_approximate
zstyle ':completion:*:expand:*' tag-order all-expansions

zstyle '*' hosts $hosts

zstyle ':completion:*:processes' command 'ps x -o pid,nice,pcpu,tt,args'
zstyle ':completion:*' list-colors $LS_COLORS

#--------------------------------------------------------#--
# prompt
#--------------------------------------------------------#--

coff=$reset_color
croot=$fg_bold[red]
cname=$fg_bold[green]
cjobs=$fg_bold[yellow]
cerror=$fg_bold[magenta]
chost=$fg_bold[cyan]
ctime=$fg_bold[cyan]

export PROMPT="%{%(!.$croot.$coff)%}%%%{$coff%} "

display_info() {

    local E=$?

    if [ $UID != 0 ]; then
        echo -n "${cname}$USERNAME${coff}"
    else
        echo -n "${croot}$USERNAME${coff}"
    fi
    echo -n "@${chost}$HOST${coff} "

    [ ${#jobtexts} -eq 0 ] || echo -n "| ${cjobs}${#jobtexts}${coff} "
    [ $E -eq 0 ] || echo -n "| ${cerror}$?${coff} "

    echo "| $PWD | `date +'%H:%M:%S'` |"
}

display_info_x() {
    case "$TERM" in
        *xterm*|*rxvt*) echo -en "\e]2;$PPID <$USERNAME@$HOST>: $PWD\a";;
        screen) [ -n $DISPLAY ] && echo -en "\e]2;$PPID <$USERNAME@$HOST>: $PWD\a"
        ;;
    esac
}


display_info_full() {
    display_info
    display_info_x
}

chpwd() {
    display_info_full
    [[ -t 1 ]] || return
}

precmd() {
    [ $? -eq 0 ] || display_info
}

alias di=display_info_full

display_info_x

#--------------------------------------------------------#--
# keymapping
#--------------------------------------------------------#--
# press ctrl-v to get special keys (like 'home')
zle -N select-word-style
select-word-style bash
bindkey -e
#bindkey '\e^h' delete-backward-word  # alt - backspace
bindkey ' ' magic-space              # history completion with space too
bindkey '[D' emacs-backward-word     # alt-cursor-left
bindkey '[C' emacs-forward-word      # alt-cursor-right
bindkey '' vi-match-bracket        # ctrl 5
bindkey '^[[8~' end-of-line          # home
bindkey '^[[7~' beginning-of-line    # end
bindkey '^k' kill-line
bindkey "^?" backward-delete-char
#  c-_ is undo

#----------------------------------------------------
# keychain => http://www.gentoo.org/projects/keychain
#----------------------------------------------------
if [ x"$USERNAME" != x"root" ]
then
    keys=""
    [ ! -f ~/.ssh/id_dsa ] || keys="~/.ssh/id_dsa "
    [ ! -f ~/.ssh/id_rsa ] || keys="$keys ~/.ssh/id_rsa"
    if [ -n "$keys" ]; then
        if which keychain &> /dev/null
        then
            eval "keychain -q $keys"
            . ~/.keychain/${HOST}-sh
        fi
    fi
    unset keys
fi



#-----------------
# host-specifics
#-----------------
for rc in ~/.zshrc.aliases ~/.zshrc.funcs ~/.zshrc.local ; do
  [ ! -f $rc ] || source $rc
done

# vim:nowrap:ft=zsh
